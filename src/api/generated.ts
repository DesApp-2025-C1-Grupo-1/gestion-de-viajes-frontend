/**
 * Generated by orval v7.9.0 游꽄
 * Do not edit manually.
 * Gesti칩n de Viajes API
 * Documentaci칩n de la API para la gesti칩n de viajes
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

/**
 * Licencia requerida para este tipo de veh칤culo seg칰n la clasificaci칩n nacional
 */
export type CreateTipoVehiculoDtoLicenciaPermitida = typeof CreateTipoVehiculoDtoLicenciaPermitida[keyof typeof CreateTipoVehiculoDtoLicenciaPermitida];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateTipoVehiculoDtoLicenciaPermitida = {
  A11: 'A1.1',
  A12: 'A1.2',
  A13: 'A1.3',
  A14: 'A1.4',
  A21: 'A2.1',
  A22: 'A2.2',
  A3: 'A3',
  B1: 'B1',
  B2: 'B2',
  C1: 'C1',
  C2: 'C2',
  C3: 'C3',
  D1: 'D1',
  D2: 'D2',
  D3: 'D3',
  D4: 'D4',
  E1: 'E1',
  E2: 'E2',
  F: 'F',
  G1: 'G1',
  G2: 'G2',
  G3: 'G3',
} as const;

export interface CreateTipoVehiculoDto {
  /** Nombre del tipo de veh칤culo */
  nombre: string;
  /** Descripci칩n del tipo de veh칤culo */
  descripcion: string;
  /** Licencia requerida para este tipo de veh칤culo seg칰n la clasificaci칩n nacional */
  licencia_permitida: CreateTipoVehiculoDtoLicenciaPermitida;
}

/**
 * licencias permitidas seg칰n la clasificaci칩n nacional
 */
export type TipoVehiculoDtoLicenciaPermitida = typeof TipoVehiculoDtoLicenciaPermitida[keyof typeof TipoVehiculoDtoLicenciaPermitida];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TipoVehiculoDtoLicenciaPermitida = {
  A11: 'A1.1',
  A12: 'A1.2',
  A13: 'A1.3',
  A14: 'A1.4',
  A21: 'A2.1',
  A22: 'A2.2',
  A3: 'A3',
  B1: 'B1',
  B2: 'B2',
  C1: 'C1',
  C2: 'C2',
  C3: 'C3',
  D1: 'D1',
  D2: 'D2',
  D3: 'D3',
  D4: 'D4',
  E1: 'E1',
  E2: 'E2',
  F: 'F',
  G1: 'G1',
  G2: 'G2',
  G3: 'G3',
} as const;

export interface TipoVehiculoDto {
  /** ID del tipo de veh칤culo */
  _id: string;
  /** Nombre del tipo de veh칤culo */
  nombre: string;
  /** Descripci칩n del tipo de veh칤culo */
  descripcion: string;
  /** licencias permitidas seg칰n la clasificaci칩n nacional */
  licencia_permitida: TipoVehiculoDtoLicenciaPermitida;
}

export interface UpdateTipoVehiculoDto { [key: string]: unknown }

export interface CreateVehiculoDto {
  /** Patente del veh칤culo (formato v치lido: ABC123 o AB123CD) */
  patente: string;
  /** Marca del veh칤culo */
  marca: string;
  /** Modelo del veh칤culo */
  modelo: string;
  /**
   * A침o de fabricaci칩n (entre 1900 y el a침o actual)
   * @minimum 1900
   * @maximum 2025
   */
  a침o: number;
  /**
   * Volumen m치ximo de carga en m췁
   * @minimum 0.01
   */
  volumen_carga: number;
  /**
   * Peso m치ximo de carga en kilogramos
   * @minimum 0.01
   */
  peso_carga: number;
  /** ID del tipo de veh칤culo (referencia a tipoVehiculo) */
  tipo: string;
  /** ID de la empresa a la que pertenece el veh칤culo */
  empresa: string;
}

export interface DireccionDto {
  /** ID de la direcci칩n */
  _id: string;
  /** Calle y n칰mero de la direcci칩n */
  calle: string;
  /** Numero de la direcci칩n */
  numero: string;
  /** Ciudad de la direcci칩n */
  ciudad: string;
  /** Estado de la direcci칩n */
  estado_provincia: string;
  /** Pa칤s de la direcci칩n */
  pais: string;
  /** Tipo de direcci칩n */
  tipo: string;
}

export interface TelefonoDto {
  /** ID del tel칠fono */
  _id: string;
  /** C칩digo de pa칤s del tel칠fono */
  codigo_pais: string;
  /** C칩digo de 치rea del tel칠fono */
  codigo_area: string;
  /** N칰mero de tel칠fono */
  numero: string;
}

export interface ContactoDto {
  /** ID del contacto */
  _id: string;
  /** Nombre del contacto */
  nombre: string;
  /** Apellido del contacto */
  apellido: string;
  /** ID Tel칠fono de contacto */
  telefono: TelefonoDto;
  /** Correo electr칩nico del contacto */
  email: string;
}

export interface EmpresaDto {
  /** ID de la empresa */
  _id: string;
  /** CUIT de la empresa (칰nico) */
  cuit: string;
  /** Raz칩n social de la empresa */
  razon_social: string;
  /** Nombre comercial de la empresa */
  nombre_comercial: string;
  /** Nombre del contacto */
  nombre_contacto: string;
  direccion: DireccionDto;
  contacto: ContactoDto;
}

export interface VehiculoDto {
  /** ID del veh칤culo */
  _id: string;
  /** Patente del veh칤culo (formato v치lido: ABC123 o AB123CD) */
  patente: string;
  /** Marca del veh칤culo */
  marca: string;
  /** Modelo del veh칤culo */
  modelo: string;
  /**
   * A침o de fabricaci칩n (entre 1900 y el a침o actual)
   * @minimum 1900
   * @maximum 2025
   */
  a침o: number;
  /**
   * Volumen m치ximo de carga en m췁
   * @minimum 0.01
   */
  volumen_carga: number;
  /**
   * Peso m치ximo de carga en kilogramos
   * @minimum 0.01
   */
  peso_carga: number;
  /** ID del tipo de veh칤culo (referencia a tipoVehiculo) */
  tipo: TipoVehiculoDto;
  /** ID de la empresa a la que pertenece el veh칤culo */
  empresa: EmpresaDto;
}

export interface UpdateVehiculoDto { [key: string]: unknown }

/**
 * tipo de la direccion
 */
export type CreateDireccionDtoTipo = typeof CreateDireccionDtoTipo[keyof typeof CreateDireccionDtoTipo];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDireccionDtoTipo = {
  fiscal: 'fiscal',
  deposito: 'deposito',
} as const;

export interface CreateDireccionDto {
  /** Nombre de la calle */
  calle: string;
  /** Numero de la calle */
  numero: string;
  /** ciudad de ubicacion */
  ciudad: string;
  /** estado o provicia de ubicacion */
  estado_provincia: string;
  /** pais de ubicacion */
  pais: string;
  /** tipo de la direccion */
  tipo: CreateDireccionDtoTipo;
}

export interface CreateTelefonoDto {
  /** C칩digo de pa칤s */
  codigo_pais: string;
  /** C칩digo de 치rea */
  codigo_area: string;
  /** N칰mero de tel칠fono sin c칩digo de pa칤s ni 치rea */
  numero: string;
}

export interface CreateContactoDto {
  /** Nombre del contacto */
  nombre: string;
  /** Correo electr칩nico del contacto */
  email: string;
  /** Tel칠fono del contacto */
  telefono: CreateTelefonoDto;
}

export interface CreateEmpresaDto {
  /** Raz칩n social de la empresa */
  razon_social: string;
  /** Nombre comercial de la empresa */
  nombre_comercial: string;
  /** CUIT de la empresa (칰nico) */
  cuit: string;
  direccion: CreateDireccionDto;
  contacto: CreateContactoDto;
}

export interface UpdateEmpresaDto { [key: string]: unknown }

/**
 * Tipo de licencia seg칰n clasificaci칩n nacional
 */
export type CreateChoferDtoTipoLicencia = typeof CreateChoferDtoTipoLicencia[keyof typeof CreateChoferDtoTipoLicencia];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateChoferDtoTipoLicencia = {
  A11: 'A1.1',
  A12: 'A1.2',
  A13: 'A1.3',
  A14: 'A1.4',
  A21: 'A2.1',
  A22: 'A2.2',
  A3: 'A3',
  B1: 'B1',
  B2: 'B2',
  C1: 'C1',
  C2: 'C2',
  C3: 'C3',
  D1: 'D1',
  D2: 'D2',
  D3: 'D3',
  D4: 'D4',
  E1: 'E1',
  E2: 'E2',
  F: 'F',
  G1: 'G1',
  G2: 'G2',
  G3: 'G3',
} as const;

export interface CreateChoferDto {
  /** Nombre del chofer */
  nombre: string;
  /** Apellido del chofer */
  apellido: string;
  /** DNI del chofer */
  dni: number;
  /** Fecha de nacimiento */
  fecha_nacimiento: string;
  /** N칰mero de licencia del conductor */
  licencia: string;
  /** Tipo de licencia seg칰n clasificaci칩n nacional */
  tipo_licencia: CreateChoferDtoTipoLicencia;
  /** Correo electr칩nico del chofer */
  email: string;
  /** ID de la empresa transportista asignada al chofer */
  empresa: string;
  /** ID del veh칤culo asignado al chofer */
  vehiculo: string;
  /** Tel칠fono del chofer */
  telefono: CreateTelefonoDto;
}

export interface ChoferDto {
  /** ID del chofer */
  _id: string;
  /** Nombre del chofer */
  nombre: string;
  /** Apellido del chofer */
  apellido: string;
  /** DNI del chofer */
  dni: number;
  /** Fecha de nacimiento */
  fecha_nacimiento: string;
  /** N칰mero de licencia del conductor */
  licencia: string;
  /** Tipo de licencia seg칰n clasificaci칩n nacional */
  tipo_licencia: string;
  /** Correo electr칩nico del chofer */
  email: string;
  telefono: TelefonoDto;
  empresa: EmpresaDto;
  vehiculo: VehiculoDto;
}

export interface UpdateChoferDto { [key: string]: unknown }

export interface CreateViajeDto {
  /** Fecha y hora de inicio del viaje */
  fecha_inicio: string;
  /** Fecha y hora estimada de llegada */
  fecha_llegada: string;
  /** Tipo de viaje */
  tipo_viaje: string;
  /** ID del dep칩sito de origen */
  deposito_origen: string;
  /** ID del dep칩sito de destino */
  deposito_destino: string;
  /** ID de la empresa */
  empresa: string;
  /** ID del chofer */
  chofer: string;
  /** ID del veh칤culo */
  vehiculo: string;
}

export interface DepositoDto {
  /** ID del dep칩sito */
  _id: string;
  /** Nombre del dep칩sito */
  nombre: string;
  /** Latitud del dep칩sito */
  lat: number;
  /** Longitud del dep칩sito */
  long: number;
  /** Tipo de dep칩sito si propio o de tercero */
  tipo: string;
  /** Horario de apertura del dep칩sito */
  horario_entrada: string;
  /** Horario de cierre del dep칩sito */
  horario_salida: string;
  /** Restricciones del dep칩sito */
  restricciones: string;
  direccion: DireccionDto;
  contacto: ContactoDto;
}

export interface ViajeDto {
  /** ID del viaje */
  _id: string;
  /** Fecha y hora de inicio del viaje */
  fecha_inicio: string;
  /** Fecha y hora de llegada */
  fecha_llegada: string;
  /** Tipo de viaje */
  tipo_viaje: string;
  /** ID del dep칩sito de origen */
  deposito_origen: DepositoDto;
  /** ID del dep칩sito de destino */
  deposito_destino: DepositoDto;
  /** ID de la empresa */
  empresa: EmpresaDto;
  /** ID del chofer */
  chofer: ChoferDto;
  /** ID del veh칤culo */
  vehiculo: VehiculoDto;
}

export interface PaginacionDto {
  data: ViajeDto[];
  total: number;
  page: number;
  limit: number;
}

export interface EmpresaViajesDto {
  /** ID de la empresa */
  empresaId: string;
  /** Nombre de la empresa */
  nombre: string;
  /** Cantidad de viajes */
  cantidadViajes: number;
}

export interface EstadisticasRecientesDto {
  /** Cantidad de veh칤culos recientes */
  vehiculos: number;
  /** Cantidad de choferes recientes */
  choferes: number;
  /** Cantidad de empresas recientes */
  empresas: number;
  /** Fecha desde la que se cuentan las estad칤sticas */
  desde: string;
}

export interface DashboardResponseDto {
  /** Pr칩ximos 5 viajes programados */
  proximosViajes: ViajeDto[];
  /** Cantidad total de veh칤culos en el sistema */
  totalVehiculos: number;
  /** Cantidad total de choferes en el sistema */
  totalChoferes: number;
  /** Cantidad total de empresas en el sistema */
  totalEmpresas: number;
  /** Top empresas con m치s viajes */
  topEmpresas: EmpresaViajesDto[];
  /** Estad칤sticas recientes del sistema */
  estadisticasRecientes: EstadisticasRecientesDto;
}

export interface UpdateViajeDto {
  /** Fecha y hora de inicio del viaje */
  fecha_inicio?: string;
  /** Fecha y hora estimada de llegada */
  fecha_llegada?: string;
  /** Tipo de viaje */
  tipo_viaje?: string;
  /** ID del dep칩sito de origen */
  deposito_origen?: string;
  /** ID del dep칩sito de destino */
  deposito_destino?: string;
  /** ID de la empresa */
  empresa?: string;
  /** ID del chofer */
  chofer?: string;
  /** ID del veh칤culo */
  vehiculo?: string;
}

/**
 * Tipo de viaje
 */
export type BuscarViajeDtoTipo = typeof BuscarViajeDtoTipo[keyof typeof BuscarViajeDtoTipo];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BuscarViajeDtoTipo = {
  nacional: 'nacional',
  internacional: 'internacional',
} as const;

export interface BuscarViajeDto {
  /** Fecha de inicio del viaje en formato ISO 8601 */
  fecha_inicio?: string;
  /** Fecha de llegada del viaje en formato ISO 8601 */
  fecha_llegada?: string;
  /** ID del viaje | ID parcial del viaje */
  _id?: string;
  /** Id de la empresa | Razon social de la empresa | nombre comercial de la empresa */
  empresa?: string;
  /** Id del chofer | Nombre del chofer */
  chofer?: string;
  /** Id del vehiculo | Patente del vehiculo */
  vehiculo?: string;
  /** Tipo de viaje */
  tipo?: BuscarViajeDtoTipo;
  /** Id del deposito de origen */
  origen?: string;
  /** Id del deposito de destino */
  destino?: string;
}

export interface CreateDepositoDto {
  /** Nombre del dep칩sito */
  nombre: string;
  /** Latitud del dep칩sito */
  lat: number;
  /** Longitud del dep칩sito */
  long: number;
  /** Tipo de dep칩sito si propio o de tercero */
  tipo: string;
  /** Horario de apertura del dep칩sito */
  horario_entrada: string;
  /** Horario de cierre del dep칩sito */
  horario_salida: string;
  /** Restricciones del dep칩sito */
  restricciones: string;
  direccion: CreateDireccionDto;
  contacto: CreateContactoDto;
}

export interface UpdateDepositoDto {
  /** Nombre del dep칩sito */
  nombre?: string;
  /** Latitud del dep칩sito */
  lat?: number;
  /** Longitud del dep칩sito */
  long?: number;
  /** Tipo de dep칩sito si propio o de tercero */
  tipo?: string;
  /** Horario de apertura del dep칩sito */
  horario_entrada?: string;
  /** Horario de cierre del dep칩sito */
  horario_salida?: string;
  /** Restricciones del dep칩sito */
  restricciones?: string;
  direccion?: CreateDireccionDto;
  contacto?: CreateContactoDto;
}

export type CreateViajeDistribucionDtoEstado = typeof CreateViajeDistribucionDtoEstado[keyof typeof CreateViajeDistribucionDtoEstado];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateViajeDistribucionDtoEstado = {
  iniciado: 'iniciado',
  inicio_de_carga: 'inicio de carga',
  fin_de_carga: 'fin de carga',
  fin_de_viaje: 'fin de viaje',
} as const;

export interface CreateViajeDistribucionDto {
  fecha_inicio: Date;
  origen: string;
  /** Tipo de viaje */
  tipo_viaje: string;
  chofer: string;
  transportista: string;
  vehiculo: string;
  remito_ids: number[];
  kilometros: number;
  tarifa_id?: number;
  estado?: CreateViajeDistribucionDtoEstado;
  observaciones?: string;
}

export interface RemitoInfoDto {
  id: string;
}

export interface TarifaDto {
  id: number;
  nombre: string;
  valorBase: number;
  esVigente: boolean;
  transportistaNombre: string;
  tipoVehiculoNombre: string;
  zonaNombre: string;
  tipoCargaNombre: string;
  transportistaId: number;
  tipoVehiculoId: number;
  zonaId: number;
  tipoCargaId: number;
  total: number;
  adicionales: AdicionalDto[];
}

export type ViajeDistribucionDtoEstado = typeof ViajeDistribucionDtoEstado[keyof typeof ViajeDistribucionDtoEstado];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ViajeDistribucionDtoEstado = {
  iniciado: 'iniciado',
  inicio_de_carga: 'inicio de carga',
  fin_de_carga: 'fin de carga',
  fin_de_viaje: 'fin de viaje',
} as const;

export interface ViajeDistribucionDto {
  /** ID del viaje */
  _id: string;
  fecha_inicio: Date;
  /** Tipo de viaje */
  tipo_viaje: string;
  estado: ViajeDistribucionDtoEstado;
  kilometros: number;
  origen: DepositoDto;
  chofer: ChoferDto;
  transportista: EmpresaDto;
  vehiculo: VehiculoDto;
  remito_ids: number[];
  remitos_info?: RemitoInfoDto[];
  tarifa_id?: number;
  tarifa?: TarifaDto;
  createdAt: string;
}

export type UpdateViajeDistribucionDtoEstado = typeof UpdateViajeDistribucionDtoEstado[keyof typeof UpdateViajeDistribucionDtoEstado];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateViajeDistribucionDtoEstado = {
  iniciado: 'iniciado',
  inicio_de_carga: 'inicio de carga',
  fin_de_carga: 'fin de carga',
  fin_de_viaje: 'fin de viaje',
} as const;

export interface UpdateViajeDistribucionDto {
  fecha_inicio?: Date;
  origen?: string;
  /** Tipo de viaje */
  tipo_viaje?: string;
  chofer?: string;
  transportista?: string;
  vehiculo?: string;
  remito_ids?: number[];
  kilometros?: number;
  tarifa_id?: number;
  estado?: UpdateViajeDistribucionDtoEstado;
  observaciones?: string;
}

export interface DestinoDto {
  /** ID del destino */
  id: number;
  /** Nombre del destino */
  nombre: string;
  /** Pa칤s del destino */
  pais: string;
  /** Provincia del destino */
  provincia: string;
  /** Localidad del destino */
  localidad: string;
  /** Direcci칩n completa del destino */
  direccion: string;
  /** Indica si el destino est치 activo */
  activo: boolean;
  /** Fecha de creaci칩n del registro */
  createdAt: string;
  /** Fecha de 칰ltima actualizaci칩n del registro */
  updatedAt: string;
}

export interface ClienteDto {
  /** ID del cliente */
  id: number;
  /** Raz칩n social del cliente */
  razonSocial: string;
  /** CUIT/RUT del cliente */
  cuit_rut: string;
  /** Direcci칩n del cliente */
  direccion: string;
  /** ID del tipo de empresa */
  tipoEmpresaId: number;
  /** Indica si el cliente est치 activo */
  activo: boolean;
  /** Fecha de creaci칩n del registro */
  createdAt: string;
  /** Fecha de 칰ltima actualizaci칩n del registro */
  updatedAt: string;
}

export interface EstadoDto {
  /** ID del estado */
  id: number;
  /** Nombre del estado */
  nombre: string;
  /** Fecha de creaci칩n del estado */
  createdAt: string;
  /** Fecha de 칰ltima actualizaci칩n del estado */
  updatedAt: string;
}

/**
 * Cantidad de bobinas
 */
export type MercaderiaDtoCantidadBobinas = { [key: string]: unknown };

/**
 * Cantidad de racks
 */
export type MercaderiaDtoCantidadRacks = { [key: string]: unknown };

/**
 * Cantidad de bultos
 */
export type MercaderiaDtoCantidadBultos = { [key: string]: unknown };

/**
 * Cantidad de pallets
 */
export type MercaderiaDtoCantidadPallets = { [key: string]: unknown };

/**
 * Requisitos especiales
 */
export type MercaderiaDtoRequisitosEspeciales = { [key: string]: unknown };

/**
 * ID del estado de la mercader칤a
 */
export type MercaderiaDtoEstadoId = { [key: string]: unknown };

export interface MercaderiaDto {
  /** ID de la mercader칤a */
  id: number;
  /** ID del tipo de mercader칤a */
  tipoMercaderiaId: number;
  /** Valor declarado de la mercader칤a */
  valorDeclarado: string;
  /** Volumen en metros c칰bicos de la mercader칤a */
  volumenMetrosCubico: string;
  /** Peso de la mercader칤a */
  pesoMercaderia: string;
  /** Cantidad de bobinas */
  cantidadBobinas?: MercaderiaDtoCantidadBobinas;
  /** Cantidad de racks */
  cantidadRacks?: MercaderiaDtoCantidadRacks;
  /** Cantidad de bultos */
  cantidadBultos?: MercaderiaDtoCantidadBultos;
  /** Cantidad de pallets */
  cantidadPallets?: MercaderiaDtoCantidadPallets;
  /** Requisitos especiales */
  requisitosEspeciales?: MercaderiaDtoRequisitosEspeciales;
  /** Indica si la mercader칤a est치 activa */
  activo: boolean;
  /** ID del estado de la mercader칤a */
  estadoId?: MercaderiaDtoEstadoId;
  /** ID del remito al que pertenece la mercader칤a */
  remitoId: number;
  /** Fecha de creaci칩n del registro */
  createdAt: string;
  /** Fecha de 칰ltima actualizaci칩n del registro */
  updatedAt: string;
}

/**
 * Prioridad del remito
 */
export type RemitoDtoPrioridad = typeof RemitoDtoPrioridad[keyof typeof RemitoDtoPrioridad];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemitoDtoPrioridad = {
  normal: 'normal',
  alta: 'alta',
  urgente: 'urgente',
} as const;

export interface RemitoDto {
  /** ID del remito */
  id: number;
  /** N칰mero asignado al remito */
  numeroAsignado: string;
  /** Fecha de emisi칩n del remito */
  fechaEmision: string;
  /** Observaciones del remito */
  observaciones?: string;
  /** Archivo adjunto del remito */
  archivoAdjunto?: string;
  /** Raz칩n de no entrega */
  razonNoEntrega?: string;
  /** Prioridad del remito */
  prioridad: RemitoDtoPrioridad;
  /** Indica si el remito est치 activo */
  activo: boolean;
  /** Fecha agendada para el remito */
  fechaAgenda?: string;
  /** Archivo del remito firmado */
  remitoFirmado?: string;
  /** ID del cliente */
  clienteId: number;
  /** ID del destino */
  destinoId: number;
  /** ID del estado actual del remito */
  estadoId: number;
  /** ID del estado anterior del remito */
  estadoAnteriorId?: number;
  /** Fecha de creaci칩n del remito */
  createdAt: string;
  /** Fecha de 칰ltima actualizaci칩n del remito */
  updatedAt: string;
  /** Destino asociado al remito */
  destino?: DestinoDto;
  /** Cliente asociado al remito */
  cliente?: ClienteDto;
  /** Estado actual del remito */
  estado?: EstadoDto;
  /** Lista de mercader칤as asociadas al remito */
  mercaderias?: MercaderiaDto[];
}

export interface RemitoResponseDto {
  /** Lista de remitos */
  data: RemitoDto[];
  /** Cantidad de remitos */
  totalItems: number;
  /** Cantidad total de p치ginas */
  totalPages: number;
  /** P치gina actual */
  currentPage: number;
}

export interface EmpresaPublicDto {
  /** ID de la empresa */
  _id: string;
  /** CUIT de la empresa (칰nico) */
  cuit: string;
  /** Nombre comercial de la empresa */
  nombre_comercial: string;
  contacto: ContactoDto;
}

export interface ZonaDto {
  /** ID de la zona */
  id: number;
  /** Nombre de la zona */
  nombre: string;
}

export interface AdicionalDto {
  id: number;
  /** Nombre del adicional */
  nombre: string;
  /** Costo por defecto del adicional */
  costoDefault: number;
  descripcion: string;
  activo: boolean;
  esGlobal: boolean;
  costoEspecifico: number;
}

export type ViajeControllerFindAllParams = {
/**
 * Cuantos registros se deben omitir para la paginaci칩n
 */
page: number;
/**
 * Cuantos registros se deben devolver en la paginaci칩n
 */
limit: number;
};

export type ViajeControllerBuscarParams = {
/**
 * Cuantos registros se deben omitir para la paginaci칩n
 */
page: number;
/**
 * Cuantos registros se deben devolver en la paginaci칩n
 */
limit: number;
};

export type ViajeDistribucionControllerFindAllParams = {
/**
 * Filtrar por estado
 */
estado?: ViajeDistribucionControllerFindAllEstado;
};

export type ViajeDistribucionControllerFindAllEstado = typeof ViajeDistribucionControllerFindAllEstado[keyof typeof ViajeDistribucionControllerFindAllEstado];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ViajeDistribucionControllerFindAllEstado = {
  iniciado: 'iniciado',
  cargando: 'cargando',
  cargado: 'cargado',
  finalizado: 'finalizado',
} as const;

export type RemitosControllerGetRemitosParams = {
/**
 * Filtra por localidad del destino
 */
localidad?: string;
/**
 * Filtra por provincia del destino
 */
provincia?: string;
/**
 * Filtra por pa칤s del destino
 */
pais?: string;
/**
 * Filtra por fecha de emisi칩n (YYYY-MM-DD)
 */
fechaEmision?: string;
/**
 * Filtra por prioridad
 */
prioridad?: string;
/**
 * Filtra por estado
 */
estadoId?: number;
/**
 * Filtra por destino
 */
destinoId?: number;
/**
 * Filtra por cliente
 */
clienteId?: number;
/**
 * Filtra por n칰mero asignado parcial
 */
numeroAsignado?: string;
/**
 * Cantidad de items por p치gina (por defecto 20)
 */
limit?: number;
/**
 * P치gina actual (por defecto 1)
 */
page?: number;
};

export type TarifasControllerTarifasFiltradasParams = {
/**
 * ID del tipo de veh칤culo
 */
tipoVehiculo: string;
/**
 * ID de la zona
 */
zona: string;
/**
 * ID del transportista
 */
transportista: string;
};

export const appControllerGetHello = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/`,options
    );
  }


export const getAppControllerGetHelloQueryKey = () => {
    return [`/`] as const;
    }

    
export const getAppControllerGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) => appControllerGetHello({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = AxiosError<unknown>


export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAppControllerGetHelloQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Crear un tipo de veh칤culo
 */
export const tipoVehiculoControllerCreate = (
    createTipoVehiculoDto: CreateTipoVehiculoDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TipoVehiculoDto>> => {
    
    
    return axios.post(
      `/tipo-vehiculo`,
      createTipoVehiculoDto,options
    );
  }



export const getTipoVehiculoControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tipoVehiculoControllerCreate>>, TError,{data: CreateTipoVehiculoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof tipoVehiculoControllerCreate>>, TError,{data: CreateTipoVehiculoDto}, TContext> => {

const mutationKey = ['tipoVehiculoControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tipoVehiculoControllerCreate>>, {data: CreateTipoVehiculoDto}> = (props) => {
          const {data} = props ?? {};

          return  tipoVehiculoControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TipoVehiculoControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof tipoVehiculoControllerCreate>>>
    export type TipoVehiculoControllerCreateMutationBody = CreateTipoVehiculoDto
    export type TipoVehiculoControllerCreateMutationError = AxiosError<void>

    /**
 * @summary Crear un tipo de veh칤culo
 */
export const useTipoVehiculoControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tipoVehiculoControllerCreate>>, TError,{data: CreateTipoVehiculoDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof tipoVehiculoControllerCreate>>,
        TError,
        {data: CreateTipoVehiculoDto},
        TContext
      > => {

      const mutationOptions = getTipoVehiculoControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener todos los tipos de veh칤culo
 */
export const tipoVehiculoControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TipoVehiculoDto[]>> => {
    
    
    return axios.get(
      `/tipo-vehiculo`,options
    );
  }


export const getTipoVehiculoControllerFindAllQueryKey = () => {
    return [`/tipo-vehiculo`] as const;
    }

    
export const getTipoVehiculoControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTipoVehiculoControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>> = ({ signal }) => tipoVehiculoControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TipoVehiculoControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>>
export type TipoVehiculoControllerFindAllQueryError = AxiosError<void>


export function useTipoVehiculoControllerFindAll<TData = Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTipoVehiculoControllerFindAll<TData = Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTipoVehiculoControllerFindAll<TData = Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todos los tipos de veh칤culo
 */

export function useTipoVehiculoControllerFindAll<TData = Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTipoVehiculoControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener un tipo de veh칤culo por ID
 */
export const tipoVehiculoControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TipoVehiculoDto>> => {
    
    
    return axios.get(
      `/tipo-vehiculo/${id}`,options
    );
  }


export const getTipoVehiculoControllerFindOneQueryKey = (id: string,) => {
    return [`/tipo-vehiculo/${id}`] as const;
    }

    
export const getTipoVehiculoControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError = AxiosError<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTipoVehiculoControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>> = ({ signal }) => tipoVehiculoControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TipoVehiculoControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>>
export type TipoVehiculoControllerFindOneQueryError = AxiosError<void>


export function useTipoVehiculoControllerFindOne<TData = Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTipoVehiculoControllerFindOne<TData = Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTipoVehiculoControllerFindOne<TData = Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener un tipo de veh칤culo por ID
 */

export function useTipoVehiculoControllerFindOne<TData = Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tipoVehiculoControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTipoVehiculoControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Actualizar un tipo de veh칤culo
 */
export const tipoVehiculoControllerUpdate = (
    id: string,
    updateTipoVehiculoDto: UpdateTipoVehiculoDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TipoVehiculoDto>> => {
    
    
    return axios.patch(
      `/tipo-vehiculo/${id}`,
      updateTipoVehiculoDto,options
    );
  }



export const getTipoVehiculoControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tipoVehiculoControllerUpdate>>, TError,{id: string;data: UpdateTipoVehiculoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof tipoVehiculoControllerUpdate>>, TError,{id: string;data: UpdateTipoVehiculoDto}, TContext> => {

const mutationKey = ['tipoVehiculoControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tipoVehiculoControllerUpdate>>, {id: string;data: UpdateTipoVehiculoDto}> = (props) => {
          const {id,data} = props ?? {};

          return  tipoVehiculoControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TipoVehiculoControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof tipoVehiculoControllerUpdate>>>
    export type TipoVehiculoControllerUpdateMutationBody = UpdateTipoVehiculoDto
    export type TipoVehiculoControllerUpdateMutationError = AxiosError<void>

    /**
 * @summary Actualizar un tipo de veh칤culo
 */
export const useTipoVehiculoControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tipoVehiculoControllerUpdate>>, TError,{id: string;data: UpdateTipoVehiculoDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof tipoVehiculoControllerUpdate>>,
        TError,
        {id: string;data: UpdateTipoVehiculoDto},
        TContext
      > => {

      const mutationOptions = getTipoVehiculoControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Eliminar un tipo de veh칤culo por ID
 */
export const tipoVehiculoControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/tipo-vehiculo/${id}`,options
    );
  }



export const getTipoVehiculoControllerRemoveMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tipoVehiculoControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof tipoVehiculoControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['tipoVehiculoControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof tipoVehiculoControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  tipoVehiculoControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TipoVehiculoControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof tipoVehiculoControllerRemove>>>
    
    export type TipoVehiculoControllerRemoveMutationError = AxiosError<void>

    /**
 * @summary Eliminar un tipo de veh칤culo por ID
 */
export const useTipoVehiculoControllerRemove = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof tipoVehiculoControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof tipoVehiculoControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getTipoVehiculoControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Crear un veh칤culo
 */
export const vehiculoControllerCreate = (
    createVehiculoDto: CreateVehiculoDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<VehiculoDto>> => {
    
    
    return axios.post(
      `/vehiculo`,
      createVehiculoDto,options
    );
  }



export const getVehiculoControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof vehiculoControllerCreate>>, TError,{data: CreateVehiculoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof vehiculoControllerCreate>>, TError,{data: CreateVehiculoDto}, TContext> => {

const mutationKey = ['vehiculoControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof vehiculoControllerCreate>>, {data: CreateVehiculoDto}> = (props) => {
          const {data} = props ?? {};

          return  vehiculoControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VehiculoControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof vehiculoControllerCreate>>>
    export type VehiculoControllerCreateMutationBody = CreateVehiculoDto
    export type VehiculoControllerCreateMutationError = AxiosError<void>

    /**
 * @summary Crear un veh칤culo
 */
export const useVehiculoControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof vehiculoControllerCreate>>, TError,{data: CreateVehiculoDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof vehiculoControllerCreate>>,
        TError,
        {data: CreateVehiculoDto},
        TContext
      > => {

      const mutationOptions = getVehiculoControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener todos los veh칤culos
 */
export const vehiculoControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<VehiculoDto[]>> => {
    
    
    return axios.get(
      `/vehiculo`,options
    );
  }


export const getVehiculoControllerFindAllQueryKey = () => {
    return [`/vehiculo`] as const;
    }

    
export const getVehiculoControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getVehiculoControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof vehiculoControllerFindAll>>> = ({ signal }) => vehiculoControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type VehiculoControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof vehiculoControllerFindAll>>>
export type VehiculoControllerFindAllQueryError = AxiosError<void>


export function useVehiculoControllerFindAll<TData = Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof vehiculoControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof vehiculoControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useVehiculoControllerFindAll<TData = Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof vehiculoControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof vehiculoControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useVehiculoControllerFindAll<TData = Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todos los veh칤culos
 */

export function useVehiculoControllerFindAll<TData = Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getVehiculoControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener un veh칤culo por ID
 */
export const vehiculoControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<VehiculoDto>> => {
    
    
    return axios.get(
      `/vehiculo/${id}`,options
    );
  }


export const getVehiculoControllerFindOneQueryKey = (id: string,) => {
    return [`/vehiculo/${id}`] as const;
    }

    
export const getVehiculoControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError = AxiosError<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getVehiculoControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof vehiculoControllerFindOne>>> = ({ signal }) => vehiculoControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type VehiculoControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof vehiculoControllerFindOne>>>
export type VehiculoControllerFindOneQueryError = AxiosError<void>


export function useVehiculoControllerFindOne<TData = Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof vehiculoControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof vehiculoControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useVehiculoControllerFindOne<TData = Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof vehiculoControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof vehiculoControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useVehiculoControllerFindOne<TData = Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener un veh칤culo por ID
 */

export function useVehiculoControllerFindOne<TData = Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof vehiculoControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getVehiculoControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Actualizar un veh칤culo
 */
export const vehiculoControllerUpdate = (
    id: string,
    updateVehiculoDto: UpdateVehiculoDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<VehiculoDto>> => {
    
    
    return axios.patch(
      `/vehiculo/${id}`,
      updateVehiculoDto,options
    );
  }



export const getVehiculoControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof vehiculoControllerUpdate>>, TError,{id: string;data: UpdateVehiculoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof vehiculoControllerUpdate>>, TError,{id: string;data: UpdateVehiculoDto}, TContext> => {

const mutationKey = ['vehiculoControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof vehiculoControllerUpdate>>, {id: string;data: UpdateVehiculoDto}> = (props) => {
          const {id,data} = props ?? {};

          return  vehiculoControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VehiculoControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof vehiculoControllerUpdate>>>
    export type VehiculoControllerUpdateMutationBody = UpdateVehiculoDto
    export type VehiculoControllerUpdateMutationError = AxiosError<void>

    /**
 * @summary Actualizar un veh칤culo
 */
export const useVehiculoControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof vehiculoControllerUpdate>>, TError,{id: string;data: UpdateVehiculoDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof vehiculoControllerUpdate>>,
        TError,
        {id: string;data: UpdateVehiculoDto},
        TContext
      > => {

      const mutationOptions = getVehiculoControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Eliminar un veh칤culo por ID
 */
export const vehiculoControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/vehiculo/${id}`,options
    );
  }



export const getVehiculoControllerRemoveMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof vehiculoControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof vehiculoControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['vehiculoControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof vehiculoControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  vehiculoControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VehiculoControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof vehiculoControllerRemove>>>
    
    export type VehiculoControllerRemoveMutationError = AxiosError<void>

    /**
 * @summary Eliminar un veh칤culo por ID
 */
export const useVehiculoControllerRemove = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof vehiculoControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof vehiculoControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getVehiculoControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener todas las empresas
 */
export const empresaControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EmpresaDto[]>> => {
    
    
    return axios.get(
      `/empresa`,options
    );
  }


export const getEmpresaControllerFindAllQueryKey = () => {
    return [`/empresa`] as const;
    }

    
export const getEmpresaControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof empresaControllerFindAll>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEmpresaControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof empresaControllerFindAll>>> = ({ signal }) => empresaControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EmpresaControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof empresaControllerFindAll>>>
export type EmpresaControllerFindAllQueryError = AxiosError<void>


export function useEmpresaControllerFindAll<TData = Awaited<ReturnType<typeof empresaControllerFindAll>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof empresaControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof empresaControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmpresaControllerFindAll<TData = Awaited<ReturnType<typeof empresaControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof empresaControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof empresaControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmpresaControllerFindAll<TData = Awaited<ReturnType<typeof empresaControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todas las empresas
 */

export function useEmpresaControllerFindAll<TData = Awaited<ReturnType<typeof empresaControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEmpresaControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Crear una empresa
 */
export const empresaControllerCreate = (
    createEmpresaDto: CreateEmpresaDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EmpresaDto>> => {
    
    
    return axios.post(
      `/empresa`,
      createEmpresaDto,options
    );
  }



export const getEmpresaControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof empresaControllerCreate>>, TError,{data: CreateEmpresaDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof empresaControllerCreate>>, TError,{data: CreateEmpresaDto}, TContext> => {

const mutationKey = ['empresaControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof empresaControllerCreate>>, {data: CreateEmpresaDto}> = (props) => {
          const {data} = props ?? {};

          return  empresaControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EmpresaControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof empresaControllerCreate>>>
    export type EmpresaControllerCreateMutationBody = CreateEmpresaDto
    export type EmpresaControllerCreateMutationError = AxiosError<void>

    /**
 * @summary Crear una empresa
 */
export const useEmpresaControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof empresaControllerCreate>>, TError,{data: CreateEmpresaDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof empresaControllerCreate>>,
        TError,
        {data: CreateEmpresaDto},
        TContext
      > => {

      const mutationOptions = getEmpresaControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener una empresa por ID
 */
export const empresaControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EmpresaDto>> => {
    
    
    return axios.get(
      `/empresa/${id}`,options
    );
  }


export const getEmpresaControllerFindOneQueryKey = (id: string,) => {
    return [`/empresa/${id}`] as const;
    }

    
export const getEmpresaControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof empresaControllerFindOne>>, TError = AxiosError<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEmpresaControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof empresaControllerFindOne>>> = ({ signal }) => empresaControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EmpresaControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof empresaControllerFindOne>>>
export type EmpresaControllerFindOneQueryError = AxiosError<void>


export function useEmpresaControllerFindOne<TData = Awaited<ReturnType<typeof empresaControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof empresaControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof empresaControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmpresaControllerFindOne<TData = Awaited<ReturnType<typeof empresaControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof empresaControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof empresaControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmpresaControllerFindOne<TData = Awaited<ReturnType<typeof empresaControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener una empresa por ID
 */

export function useEmpresaControllerFindOne<TData = Awaited<ReturnType<typeof empresaControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof empresaControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEmpresaControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Actualizar una empresa
 */
export const empresaControllerUpdate = (
    id: string,
    updateEmpresaDto: UpdateEmpresaDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EmpresaDto>> => {
    
    
    return axios.patch(
      `/empresa/${id}`,
      updateEmpresaDto,options
    );
  }



export const getEmpresaControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof empresaControllerUpdate>>, TError,{id: string;data: UpdateEmpresaDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof empresaControllerUpdate>>, TError,{id: string;data: UpdateEmpresaDto}, TContext> => {

const mutationKey = ['empresaControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof empresaControllerUpdate>>, {id: string;data: UpdateEmpresaDto}> = (props) => {
          const {id,data} = props ?? {};

          return  empresaControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EmpresaControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof empresaControllerUpdate>>>
    export type EmpresaControllerUpdateMutationBody = UpdateEmpresaDto
    export type EmpresaControllerUpdateMutationError = AxiosError<void>

    /**
 * @summary Actualizar una empresa
 */
export const useEmpresaControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof empresaControllerUpdate>>, TError,{id: string;data: UpdateEmpresaDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof empresaControllerUpdate>>,
        TError,
        {id: string;data: UpdateEmpresaDto},
        TContext
      > => {

      const mutationOptions = getEmpresaControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Eliminar una empresa por ID
 */
export const empresaControllerDelete = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/empresa/${id}`,options
    );
  }



export const getEmpresaControllerDeleteMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof empresaControllerDelete>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof empresaControllerDelete>>, TError,{id: string}, TContext> => {

const mutationKey = ['empresaControllerDelete'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof empresaControllerDelete>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  empresaControllerDelete(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EmpresaControllerDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof empresaControllerDelete>>>
    
    export type EmpresaControllerDeleteMutationError = AxiosError<void>

    /**
 * @summary Eliminar una empresa por ID
 */
export const useEmpresaControllerDelete = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof empresaControllerDelete>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof empresaControllerDelete>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getEmpresaControllerDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Crear un chofer
 */
export const choferControllerCreate = (
    createChoferDto: CreateChoferDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChoferDto>> => {
    
    
    return axios.post(
      `/chofer`,
      createChoferDto,options
    );
  }



export const getChoferControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof choferControllerCreate>>, TError,{data: CreateChoferDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof choferControllerCreate>>, TError,{data: CreateChoferDto}, TContext> => {

const mutationKey = ['choferControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof choferControllerCreate>>, {data: CreateChoferDto}> = (props) => {
          const {data} = props ?? {};

          return  choferControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChoferControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof choferControllerCreate>>>
    export type ChoferControllerCreateMutationBody = CreateChoferDto
    export type ChoferControllerCreateMutationError = AxiosError<void>

    /**
 * @summary Crear un chofer
 */
export const useChoferControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof choferControllerCreate>>, TError,{data: CreateChoferDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof choferControllerCreate>>,
        TError,
        {data: CreateChoferDto},
        TContext
      > => {

      const mutationOptions = getChoferControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener todos los choferes
 */
export const choferControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChoferDto[]>> => {
    
    
    return axios.get(
      `/chofer`,options
    );
  }


export const getChoferControllerFindAllQueryKey = () => {
    return [`/chofer`] as const;
    }

    
export const getChoferControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof choferControllerFindAll>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getChoferControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof choferControllerFindAll>>> = ({ signal }) => choferControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ChoferControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof choferControllerFindAll>>>
export type ChoferControllerFindAllQueryError = AxiosError<void>


export function useChoferControllerFindAll<TData = Awaited<ReturnType<typeof choferControllerFindAll>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof choferControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof choferControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useChoferControllerFindAll<TData = Awaited<ReturnType<typeof choferControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof choferControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof choferControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useChoferControllerFindAll<TData = Awaited<ReturnType<typeof choferControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todos los choferes
 */

export function useChoferControllerFindAll<TData = Awaited<ReturnType<typeof choferControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getChoferControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener un chofer por ID
 */
export const choferControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChoferDto>> => {
    
    
    return axios.get(
      `/chofer/${id}`,options
    );
  }


export const getChoferControllerFindOneQueryKey = (id: string,) => {
    return [`/chofer/${id}`] as const;
    }

    
export const getChoferControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof choferControllerFindOne>>, TError = AxiosError<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getChoferControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof choferControllerFindOne>>> = ({ signal }) => choferControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ChoferControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof choferControllerFindOne>>>
export type ChoferControllerFindOneQueryError = AxiosError<void>


export function useChoferControllerFindOne<TData = Awaited<ReturnType<typeof choferControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof choferControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof choferControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useChoferControllerFindOne<TData = Awaited<ReturnType<typeof choferControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof choferControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof choferControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useChoferControllerFindOne<TData = Awaited<ReturnType<typeof choferControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener un chofer por ID
 */

export function useChoferControllerFindOne<TData = Awaited<ReturnType<typeof choferControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof choferControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getChoferControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Actualizar un chofer
 */
export const choferControllerUpdate = (
    id: string,
    updateChoferDto: UpdateChoferDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ChoferDto>> => {
    
    
    return axios.patch(
      `/chofer/${id}`,
      updateChoferDto,options
    );
  }



export const getChoferControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof choferControllerUpdate>>, TError,{id: string;data: UpdateChoferDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof choferControllerUpdate>>, TError,{id: string;data: UpdateChoferDto}, TContext> => {

const mutationKey = ['choferControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof choferControllerUpdate>>, {id: string;data: UpdateChoferDto}> = (props) => {
          const {id,data} = props ?? {};

          return  choferControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChoferControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof choferControllerUpdate>>>
    export type ChoferControllerUpdateMutationBody = UpdateChoferDto
    export type ChoferControllerUpdateMutationError = AxiosError<void>

    /**
 * @summary Actualizar un chofer
 */
export const useChoferControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof choferControllerUpdate>>, TError,{id: string;data: UpdateChoferDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof choferControllerUpdate>>,
        TError,
        {id: string;data: UpdateChoferDto},
        TContext
      > => {

      const mutationOptions = getChoferControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Eliminar un chofer por ID
 */
export const choferControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/chofer/${id}`,options
    );
  }



export const getChoferControllerRemoveMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof choferControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof choferControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['choferControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof choferControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  choferControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChoferControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof choferControllerRemove>>>
    
    export type ChoferControllerRemoveMutationError = AxiosError<void>

    /**
 * @summary Eliminar un chofer por ID
 */
export const useChoferControllerRemove = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof choferControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof choferControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getChoferControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Crear un viaje
 */
export const viajeControllerCreate = (
    createViajeDto: CreateViajeDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ViajeDto>> => {
    
    
    return axios.post(
      `/viaje`,
      createViajeDto,options
    );
  }



export const getViajeControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeControllerCreate>>, TError,{data: CreateViajeDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof viajeControllerCreate>>, TError,{data: CreateViajeDto}, TContext> => {

const mutationKey = ['viajeControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof viajeControllerCreate>>, {data: CreateViajeDto}> = (props) => {
          const {data} = props ?? {};

          return  viajeControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ViajeControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof viajeControllerCreate>>>
    export type ViajeControllerCreateMutationBody = CreateViajeDto
    export type ViajeControllerCreateMutationError = AxiosError<void>

    /**
 * @summary Crear un viaje
 */
export const useViajeControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeControllerCreate>>, TError,{data: CreateViajeDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof viajeControllerCreate>>,
        TError,
        {data: CreateViajeDto},
        TContext
      > => {

      const mutationOptions = getViajeControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener todos los viajes
 */
export const viajeControllerFindAll = (
    params: ViajeControllerFindAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginacionDto>> => {
    
    
    return axios.get(
      `/viaje`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getViajeControllerFindAllQueryKey = (params: ViajeControllerFindAllParams,) => {
    return [`/viaje`, ...(params ? [params]: [])] as const;
    }

    
export const getViajeControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof viajeControllerFindAll>>, TError = AxiosError<void>>(params: ViajeControllerFindAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getViajeControllerFindAllQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof viajeControllerFindAll>>> = ({ signal }) => viajeControllerFindAll(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ViajeControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof viajeControllerFindAll>>>
export type ViajeControllerFindAllQueryError = AxiosError<void>


export function useViajeControllerFindAll<TData = Awaited<ReturnType<typeof viajeControllerFindAll>>, TError = AxiosError<void>>(
 params: ViajeControllerFindAllParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof viajeControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof viajeControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useViajeControllerFindAll<TData = Awaited<ReturnType<typeof viajeControllerFindAll>>, TError = AxiosError<void>>(
 params: ViajeControllerFindAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof viajeControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof viajeControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useViajeControllerFindAll<TData = Awaited<ReturnType<typeof viajeControllerFindAll>>, TError = AxiosError<void>>(
 params: ViajeControllerFindAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todos los viajes
 */

export function useViajeControllerFindAll<TData = Awaited<ReturnType<typeof viajeControllerFindAll>>, TError = AxiosError<void>>(
 params: ViajeControllerFindAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getViajeControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener datos del dashboard
 */
export const viajeControllerGetDashboard = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DashboardResponseDto>> => {
    
    
    return axios.get(
      `/viaje/dashboard`,options
    );
  }


export const getViajeControllerGetDashboardQueryKey = () => {
    return [`/viaje/dashboard`] as const;
    }

    
export const getViajeControllerGetDashboardQueryOptions = <TData = Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getViajeControllerGetDashboardQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof viajeControllerGetDashboard>>> = ({ signal }) => viajeControllerGetDashboard({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ViajeControllerGetDashboardQueryResult = NonNullable<Awaited<ReturnType<typeof viajeControllerGetDashboard>>>
export type ViajeControllerGetDashboardQueryError = AxiosError<unknown>


export function useViajeControllerGetDashboard<TData = Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError = AxiosError<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof viajeControllerGetDashboard>>,
          TError,
          Awaited<ReturnType<typeof viajeControllerGetDashboard>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useViajeControllerGetDashboard<TData = Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof viajeControllerGetDashboard>>,
          TError,
          Awaited<ReturnType<typeof viajeControllerGetDashboard>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useViajeControllerGetDashboard<TData = Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener datos del dashboard
 */

export function useViajeControllerGetDashboard<TData = Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerGetDashboard>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getViajeControllerGetDashboardQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener un viaje por ID
 */
export const viajeControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ViajeDto>> => {
    
    
    return axios.get(
      `/viaje/${id}`,options
    );
  }


export const getViajeControllerFindOneQueryKey = (id: string,) => {
    return [`/viaje/${id}`] as const;
    }

    
export const getViajeControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof viajeControllerFindOne>>, TError = AxiosError<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getViajeControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof viajeControllerFindOne>>> = ({ signal }) => viajeControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ViajeControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof viajeControllerFindOne>>>
export type ViajeControllerFindOneQueryError = AxiosError<void>


export function useViajeControllerFindOne<TData = Awaited<ReturnType<typeof viajeControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof viajeControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof viajeControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useViajeControllerFindOne<TData = Awaited<ReturnType<typeof viajeControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof viajeControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof viajeControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useViajeControllerFindOne<TData = Awaited<ReturnType<typeof viajeControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener un viaje por ID
 */

export function useViajeControllerFindOne<TData = Awaited<ReturnType<typeof viajeControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getViajeControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Actualizar un viaje
 */
export const viajeControllerUpdate = (
    id: string,
    updateViajeDto: UpdateViajeDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ViajeDto>> => {
    
    
    return axios.patch(
      `/viaje/${id}`,
      updateViajeDto,options
    );
  }



export const getViajeControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeControllerUpdate>>, TError,{id: string;data: UpdateViajeDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof viajeControllerUpdate>>, TError,{id: string;data: UpdateViajeDto}, TContext> => {

const mutationKey = ['viajeControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof viajeControllerUpdate>>, {id: string;data: UpdateViajeDto}> = (props) => {
          const {id,data} = props ?? {};

          return  viajeControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ViajeControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof viajeControllerUpdate>>>
    export type ViajeControllerUpdateMutationBody = UpdateViajeDto
    export type ViajeControllerUpdateMutationError = AxiosError<void>

    /**
 * @summary Actualizar un viaje
 */
export const useViajeControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeControllerUpdate>>, TError,{id: string;data: UpdateViajeDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof viajeControllerUpdate>>,
        TError,
        {id: string;data: UpdateViajeDto},
        TContext
      > => {

      const mutationOptions = getViajeControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Eliminar un viaje por ID
 */
export const viajeControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/viaje/${id}`,options
    );
  }



export const getViajeControllerRemoveMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof viajeControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['viajeControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof viajeControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  viajeControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ViajeControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof viajeControllerRemove>>>
    
    export type ViajeControllerRemoveMutationError = AxiosError<void>

    /**
 * @summary Eliminar un viaje por ID
 */
export const useViajeControllerRemove = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof viajeControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getViajeControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Buscar viajes por filtros
 */
export const viajeControllerBuscar = (
    buscarViajeDto: BuscarViajeDto,
    params: ViajeControllerBuscarParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PaginacionDto>> => {
    
    
    return axios.post(
      `/viaje/buscar`,
      buscarViajeDto,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getViajeControllerBuscarMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeControllerBuscar>>, TError,{data: BuscarViajeDto;params: ViajeControllerBuscarParams}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof viajeControllerBuscar>>, TError,{data: BuscarViajeDto;params: ViajeControllerBuscarParams}, TContext> => {

const mutationKey = ['viajeControllerBuscar'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof viajeControllerBuscar>>, {data: BuscarViajeDto;params: ViajeControllerBuscarParams}> = (props) => {
          const {data,params} = props ?? {};

          return  viajeControllerBuscar(data,params,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ViajeControllerBuscarMutationResult = NonNullable<Awaited<ReturnType<typeof viajeControllerBuscar>>>
    export type ViajeControllerBuscarMutationBody = BuscarViajeDto
    export type ViajeControllerBuscarMutationError = AxiosError<unknown>

    /**
 * @summary Buscar viajes por filtros
 */
export const useViajeControllerBuscar = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeControllerBuscar>>, TError,{data: BuscarViajeDto;params: ViajeControllerBuscarParams}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof viajeControllerBuscar>>,
        TError,
        {data: BuscarViajeDto;params: ViajeControllerBuscarParams},
        TContext
      > => {

      const mutationOptions = getViajeControllerBuscarMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Crear un deposito
 */
export const depositoControllerCreate = (
    createDepositoDto: CreateDepositoDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DepositoDto>> => {
    
    
    return axios.post(
      `/deposito`,
      createDepositoDto,options
    );
  }



export const getDepositoControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof depositoControllerCreate>>, TError,{data: CreateDepositoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof depositoControllerCreate>>, TError,{data: CreateDepositoDto}, TContext> => {

const mutationKey = ['depositoControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof depositoControllerCreate>>, {data: CreateDepositoDto}> = (props) => {
          const {data} = props ?? {};

          return  depositoControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DepositoControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof depositoControllerCreate>>>
    export type DepositoControllerCreateMutationBody = CreateDepositoDto
    export type DepositoControllerCreateMutationError = AxiosError<void>

    /**
 * @summary Crear un deposito
 */
export const useDepositoControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof depositoControllerCreate>>, TError,{data: CreateDepositoDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof depositoControllerCreate>>,
        TError,
        {data: CreateDepositoDto},
        TContext
      > => {

      const mutationOptions = getDepositoControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener todos los deposito
 */
export const depositoControllerFindAll = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DepositoDto[]>> => {
    
    
    return axios.get(
      `/deposito`,options
    );
  }


export const getDepositoControllerFindAllQueryKey = () => {
    return [`/deposito`] as const;
    }

    
export const getDepositoControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof depositoControllerFindAll>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDepositoControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof depositoControllerFindAll>>> = ({ signal }) => depositoControllerFindAll({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DepositoControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof depositoControllerFindAll>>>
export type DepositoControllerFindAllQueryError = AxiosError<void>


export function useDepositoControllerFindAll<TData = Awaited<ReturnType<typeof depositoControllerFindAll>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof depositoControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof depositoControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDepositoControllerFindAll<TData = Awaited<ReturnType<typeof depositoControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof depositoControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof depositoControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDepositoControllerFindAll<TData = Awaited<ReturnType<typeof depositoControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todos los deposito
 */

export function useDepositoControllerFindAll<TData = Awaited<ReturnType<typeof depositoControllerFindAll>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDepositoControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener un deposito por ID
 */
export const depositoControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DepositoDto>> => {
    
    
    return axios.get(
      `/deposito/${id}`,options
    );
  }


export const getDepositoControllerFindOneQueryKey = (id: string,) => {
    return [`/deposito/${id}`] as const;
    }

    
export const getDepositoControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof depositoControllerFindOne>>, TError = AxiosError<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDepositoControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof depositoControllerFindOne>>> = ({ signal }) => depositoControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DepositoControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof depositoControllerFindOne>>>
export type DepositoControllerFindOneQueryError = AxiosError<void>


export function useDepositoControllerFindOne<TData = Awaited<ReturnType<typeof depositoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof depositoControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof depositoControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDepositoControllerFindOne<TData = Awaited<ReturnType<typeof depositoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof depositoControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof depositoControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDepositoControllerFindOne<TData = Awaited<ReturnType<typeof depositoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener un deposito por ID
 */

export function useDepositoControllerFindOne<TData = Awaited<ReturnType<typeof depositoControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof depositoControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDepositoControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Actualizar un deposito
 */
export const depositoControllerUpdate = (
    id: string,
    updateDepositoDto: UpdateDepositoDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DepositoDto>> => {
    
    
    return axios.patch(
      `/deposito/${id}`,
      updateDepositoDto,options
    );
  }



export const getDepositoControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof depositoControllerUpdate>>, TError,{id: string;data: UpdateDepositoDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof depositoControllerUpdate>>, TError,{id: string;data: UpdateDepositoDto}, TContext> => {

const mutationKey = ['depositoControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof depositoControllerUpdate>>, {id: string;data: UpdateDepositoDto}> = (props) => {
          const {id,data} = props ?? {};

          return  depositoControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DepositoControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof depositoControllerUpdate>>>
    export type DepositoControllerUpdateMutationBody = UpdateDepositoDto
    export type DepositoControllerUpdateMutationError = AxiosError<void>

    /**
 * @summary Actualizar un deposito
 */
export const useDepositoControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof depositoControllerUpdate>>, TError,{id: string;data: UpdateDepositoDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof depositoControllerUpdate>>,
        TError,
        {id: string;data: UpdateDepositoDto},
        TContext
      > => {

      const mutationOptions = getDepositoControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Eliminar un deposito por ID
 */
export const depositoControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/deposito/${id}`,options
    );
  }



export const getDepositoControllerRemoveMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof depositoControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof depositoControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['depositoControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof depositoControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  depositoControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DepositoControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof depositoControllerRemove>>>
    
    export type DepositoControllerRemoveMutationError = AxiosError<void>

    /**
 * @summary Eliminar un deposito por ID
 */
export const useDepositoControllerRemove = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof depositoControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof depositoControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDepositoControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Crear un nuevo viaje de distribuci칩n
 */
export const viajeDistribucionControllerCreate = (
    createViajeDistribucionDto: CreateViajeDistribucionDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CreateViajeDistribucionDto>> => {
    
    
    return axios.post(
      `/viaje-distribucion`,
      createViajeDistribucionDto,options
    );
  }



export const getViajeDistribucionControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerCreate>>, TError,{data: CreateViajeDistribucionDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerCreate>>, TError,{data: CreateViajeDistribucionDto}, TContext> => {

const mutationKey = ['viajeDistribucionControllerCreate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof viajeDistribucionControllerCreate>>, {data: CreateViajeDistribucionDto}> = (props) => {
          const {data} = props ?? {};

          return  viajeDistribucionControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ViajeDistribucionControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof viajeDistribucionControllerCreate>>>
    export type ViajeDistribucionControllerCreateMutationBody = CreateViajeDistribucionDto
    export type ViajeDistribucionControllerCreateMutationError = AxiosError<void>

    /**
 * @summary Crear un nuevo viaje de distribuci칩n
 */
export const useViajeDistribucionControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerCreate>>, TError,{data: CreateViajeDistribucionDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof viajeDistribucionControllerCreate>>,
        TError,
        {data: CreateViajeDistribucionDto},
        TContext
      > => {

      const mutationOptions = getViajeDistribucionControllerCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener todos los viajes de distribuci칩n
 */
export const viajeDistribucionControllerFindAll = (
    params?: ViajeDistribucionControllerFindAllParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ViajeDistribucionDto[]>> => {
    
    
    return axios.get(
      `/viaje-distribucion`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getViajeDistribucionControllerFindAllQueryKey = (params?: ViajeDistribucionControllerFindAllParams,) => {
    return [`/viaje-distribucion`, ...(params ? [params]: [])] as const;
    }

    
export const getViajeDistribucionControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError = AxiosError<unknown>>(params?: ViajeDistribucionControllerFindAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getViajeDistribucionControllerFindAllQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>> = ({ signal }) => viajeDistribucionControllerFindAll(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ViajeDistribucionControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>>
export type ViajeDistribucionControllerFindAllQueryError = AxiosError<unknown>


export function useViajeDistribucionControllerFindAll<TData = Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError = AxiosError<unknown>>(
 params: undefined |  ViajeDistribucionControllerFindAllParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useViajeDistribucionControllerFindAll<TData = Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError = AxiosError<unknown>>(
 params?: ViajeDistribucionControllerFindAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useViajeDistribucionControllerFindAll<TData = Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError = AxiosError<unknown>>(
 params?: ViajeDistribucionControllerFindAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todos los viajes de distribuci칩n
 */

export function useViajeDistribucionControllerFindAll<TData = Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError = AxiosError<unknown>>(
 params?: ViajeDistribucionControllerFindAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindAll>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getViajeDistribucionControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener un viaje de distribuci칩n por ID
 */
export const viajeDistribucionControllerFindOne = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ViajeDistribucionDto>> => {
    
    
    return axios.get(
      `/viaje-distribucion/${id}`,options
    );
  }


export const getViajeDistribucionControllerFindOneQueryKey = (id: string,) => {
    return [`/viaje-distribucion/${id}`] as const;
    }

    
export const getViajeDistribucionControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError = AxiosError<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getViajeDistribucionControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>> = ({ signal }) => viajeDistribucionControllerFindOne(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ViajeDistribucionControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>>
export type ViajeDistribucionControllerFindOneQueryError = AxiosError<void>


export function useViajeDistribucionControllerFindOne<TData = Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useViajeDistribucionControllerFindOne<TData = Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useViajeDistribucionControllerFindOne<TData = Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener un viaje de distribuci칩n por ID
 */

export function useViajeDistribucionControllerFindOne<TData = Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError = AxiosError<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof viajeDistribucionControllerFindOne>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getViajeDistribucionControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Actualizar un viaje de distribuci칩n
 */
export const viajeDistribucionControllerUpdate = (
    id: string,
    updateViajeDistribucionDto: UpdateViajeDistribucionDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ViajeDistribucionDto>> => {
    
    
    return axios.patch(
      `/viaje-distribucion/${id}`,
      updateViajeDistribucionDto,options
    );
  }



export const getViajeDistribucionControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerUpdate>>, TError,{id: string;data: UpdateViajeDistribucionDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerUpdate>>, TError,{id: string;data: UpdateViajeDistribucionDto}, TContext> => {

const mutationKey = ['viajeDistribucionControllerUpdate'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof viajeDistribucionControllerUpdate>>, {id: string;data: UpdateViajeDistribucionDto}> = (props) => {
          const {id,data} = props ?? {};

          return  viajeDistribucionControllerUpdate(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ViajeDistribucionControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof viajeDistribucionControllerUpdate>>>
    export type ViajeDistribucionControllerUpdateMutationBody = UpdateViajeDistribucionDto
    export type ViajeDistribucionControllerUpdateMutationError = AxiosError<void>

    /**
 * @summary Actualizar un viaje de distribuci칩n
 */
export const useViajeDistribucionControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerUpdate>>, TError,{id: string;data: UpdateViajeDistribucionDto}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof viajeDistribucionControllerUpdate>>,
        TError,
        {id: string;data: UpdateViajeDistribucionDto},
        TContext
      > => {

      const mutationOptions = getViajeDistribucionControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Eliminar un viaje de distribuci칩n
 */
export const viajeDistribucionControllerRemove = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.delete(
      `/viaje-distribucion/${id}`,options
    );
  }



export const getViajeDistribucionControllerRemoveMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['viajeDistribucionControllerRemove'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof viajeDistribucionControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  viajeDistribucionControllerRemove(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ViajeDistribucionControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof viajeDistribucionControllerRemove>>>
    
    export type ViajeDistribucionControllerRemoveMutationError = AxiosError<void>

    /**
 * @summary Eliminar un viaje de distribuci칩n
 */
export const useViajeDistribucionControllerRemove = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerRemove>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof viajeDistribucionControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getViajeDistribucionControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Actualizar el estado de un viaje de distribuci칩n
 */
export const viajeDistribucionControllerUpdateEstado = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ViajeDistribucionDto>> => {
    
    
    return axios.patch(
      `/viaje-distribucion/${id}/estado`,undefined,options
    );
  }



export const getViajeDistribucionControllerUpdateEstadoMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerUpdateEstado>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerUpdateEstado>>, TError,{id: string}, TContext> => {

const mutationKey = ['viajeDistribucionControllerUpdateEstado'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof viajeDistribucionControllerUpdateEstado>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  viajeDistribucionControllerUpdateEstado(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ViajeDistribucionControllerUpdateEstadoMutationResult = NonNullable<Awaited<ReturnType<typeof viajeDistribucionControllerUpdateEstado>>>
    
    export type ViajeDistribucionControllerUpdateEstadoMutationError = AxiosError<void>

    /**
 * @summary Actualizar el estado de un viaje de distribuci칩n
 */
export const useViajeDistribucionControllerUpdateEstado = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof viajeDistribucionControllerUpdateEstado>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof viajeDistribucionControllerUpdateEstado>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getViajeDistribucionControllerUpdateEstadoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener remitos con filtros y paginaci칩n
 */
export const remitosControllerGetRemitos = (
    params?: RemitosControllerGetRemitosParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RemitoResponseDto>> => {
    
    
    return axios.get(
      `/remito`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getRemitosControllerGetRemitosQueryKey = (params?: RemitosControllerGetRemitosParams,) => {
    return [`/remito`, ...(params ? [params]: [])] as const;
    }

    
export const getRemitosControllerGetRemitosQueryOptions = <TData = Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError = AxiosError<void>>(params?: RemitosControllerGetRemitosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRemitosControllerGetRemitosQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof remitosControllerGetRemitos>>> = ({ signal }) => remitosControllerGetRemitos(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RemitosControllerGetRemitosQueryResult = NonNullable<Awaited<ReturnType<typeof remitosControllerGetRemitos>>>
export type RemitosControllerGetRemitosQueryError = AxiosError<void>


export function useRemitosControllerGetRemitos<TData = Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError = AxiosError<void>>(
 params: undefined |  RemitosControllerGetRemitosParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof remitosControllerGetRemitos>>,
          TError,
          Awaited<ReturnType<typeof remitosControllerGetRemitos>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRemitosControllerGetRemitos<TData = Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError = AxiosError<void>>(
 params?: RemitosControllerGetRemitosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof remitosControllerGetRemitos>>,
          TError,
          Awaited<ReturnType<typeof remitosControllerGetRemitos>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRemitosControllerGetRemitos<TData = Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError = AxiosError<void>>(
 params?: RemitosControllerGetRemitosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener remitos con filtros y paginaci칩n
 */

export function useRemitosControllerGetRemitos<TData = Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError = AxiosError<void>>(
 params?: RemitosControllerGetRemitosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemitos>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRemitosControllerGetRemitosQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener remito por ID
 */
export const remitosControllerGetRemito = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RemitoDto>> => {
    
    
    return axios.get(
      `/remito/${id}`,options
    );
  }


export const getRemitosControllerGetRemitoQueryKey = (id: number,) => {
    return [`/remito/${id}`] as const;
    }

    
export const getRemitosControllerGetRemitoQueryOptions = <TData = Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError = AxiosError<void>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getRemitosControllerGetRemitoQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof remitosControllerGetRemito>>> = ({ signal }) => remitosControllerGetRemito(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type RemitosControllerGetRemitoQueryResult = NonNullable<Awaited<ReturnType<typeof remitosControllerGetRemito>>>
export type RemitosControllerGetRemitoQueryError = AxiosError<void>


export function useRemitosControllerGetRemito<TData = Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError = AxiosError<void>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof remitosControllerGetRemito>>,
          TError,
          Awaited<ReturnType<typeof remitosControllerGetRemito>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRemitosControllerGetRemito<TData = Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError = AxiosError<void>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof remitosControllerGetRemito>>,
          TError,
          Awaited<ReturnType<typeof remitosControllerGetRemito>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useRemitosControllerGetRemito<TData = Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError = AxiosError<void>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener remito por ID
 */

export function useRemitosControllerGetRemito<TData = Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError = AxiosError<void>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof remitosControllerGetRemito>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getRemitosControllerGetRemitoQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Cambiar estado de remito
 */
export const remitosControllerCambiarEstado = (
    id: number,
    eid: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RemitoDto>> => {
    
    
    return axios.put(
      `/remito/${id}/estado/${eid}`,undefined,options
    );
  }



export const getRemitosControllerCambiarEstadoMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remitosControllerCambiarEstado>>, TError,{id: number;eid: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof remitosControllerCambiarEstado>>, TError,{id: number;eid: number}, TContext> => {

const mutationKey = ['remitosControllerCambiarEstado'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof remitosControllerCambiarEstado>>, {id: number;eid: number}> = (props) => {
          const {id,eid} = props ?? {};

          return  remitosControllerCambiarEstado(id,eid,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemitosControllerCambiarEstadoMutationResult = NonNullable<Awaited<ReturnType<typeof remitosControllerCambiarEstado>>>
    
    export type RemitosControllerCambiarEstadoMutationError = AxiosError<void>

    /**
 * @summary Cambiar estado de remito
 */
export const useRemitosControllerCambiarEstado = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remitosControllerCambiarEstado>>, TError,{id: number;eid: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof remitosControllerCambiarEstado>>,
        TError,
        {id: number;eid: number},
        TContext
      > => {

      const mutationOptions = getRemitosControllerCambiarEstadoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Entregar remito (requiere archivo firmado)
 */
export const remitosControllerEntregarRemito = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RemitoDto>> => {
    
    
    return axios.put(
      `/remito/${id}/firmar`,undefined,options
    );
  }



export const getRemitosControllerEntregarRemitoMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remitosControllerEntregarRemito>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof remitosControllerEntregarRemito>>, TError,{id: number}, TContext> => {

const mutationKey = ['remitosControllerEntregarRemito'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof remitosControllerEntregarRemito>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  remitosControllerEntregarRemito(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemitosControllerEntregarRemitoMutationResult = NonNullable<Awaited<ReturnType<typeof remitosControllerEntregarRemito>>>
    
    export type RemitosControllerEntregarRemitoMutationError = AxiosError<void>

    /**
 * @summary Entregar remito (requiere archivo firmado)
 */
export const useRemitosControllerEntregarRemito = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remitosControllerEntregarRemito>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof remitosControllerEntregarRemito>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getRemitosControllerEntregarRemitoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Marcar remito como no entregado
 */
export const remitosControllerMarcarNoEntregado = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<RemitoDto>> => {
    
    
    return axios.put(
      `/remito/${id}/no-entregado`,undefined,options
    );
  }



export const getRemitosControllerMarcarNoEntregadoMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remitosControllerMarcarNoEntregado>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof remitosControllerMarcarNoEntregado>>, TError,{id: number}, TContext> => {

const mutationKey = ['remitosControllerMarcarNoEntregado'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof remitosControllerMarcarNoEntregado>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  remitosControllerMarcarNoEntregado(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemitosControllerMarcarNoEntregadoMutationResult = NonNullable<Awaited<ReturnType<typeof remitosControllerMarcarNoEntregado>>>
    
    export type RemitosControllerMarcarNoEntregadoMutationError = AxiosError<void>

    /**
 * @summary Marcar remito como no entregado
 */
export const useRemitosControllerMarcarNoEntregado = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof remitosControllerMarcarNoEntregado>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof remitosControllerMarcarNoEntregado>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getRemitosControllerMarcarNoEntregadoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Obtener todas las empresas
 */
export const publicControllerFindAllEmpresasV1 = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EmpresaPublicDto[]>> => {
    
    
    return axios.get(
      `/public/empresas/v1`,options
    );
  }


export const getPublicControllerFindAllEmpresasV1QueryKey = () => {
    return [`/public/empresas/v1`] as const;
    }

    
export const getPublicControllerFindAllEmpresasV1QueryOptions = <TData = Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPublicControllerFindAllEmpresasV1QueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>> = ({ signal }) => publicControllerFindAllEmpresasV1({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PublicControllerFindAllEmpresasV1QueryResult = NonNullable<Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>>
export type PublicControllerFindAllEmpresasV1QueryError = AxiosError<void>


export function usePublicControllerFindAllEmpresasV1<TData = Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>,
          TError,
          Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePublicControllerFindAllEmpresasV1<TData = Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>,
          TError,
          Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePublicControllerFindAllEmpresasV1<TData = Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todas las empresas
 */

export function usePublicControllerFindAllEmpresasV1<TData = Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllEmpresasV1>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPublicControllerFindAllEmpresasV1QueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener todos los tipos de veh칤culo
 */
export const publicControllerFindAllTiposVehiculoV1 = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TipoVehiculoDto[]>> => {
    
    
    return axios.get(
      `/public/tipos_vehiculo/v1`,options
    );
  }


export const getPublicControllerFindAllTiposVehiculoV1QueryKey = () => {
    return [`/public/tipos_vehiculo/v1`] as const;
    }

    
export const getPublicControllerFindAllTiposVehiculoV1QueryOptions = <TData = Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPublicControllerFindAllTiposVehiculoV1QueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>> = ({ signal }) => publicControllerFindAllTiposVehiculoV1({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PublicControllerFindAllTiposVehiculoV1QueryResult = NonNullable<Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>>
export type PublicControllerFindAllTiposVehiculoV1QueryError = AxiosError<void>


export function usePublicControllerFindAllTiposVehiculoV1<TData = Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>,
          TError,
          Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePublicControllerFindAllTiposVehiculoV1<TData = Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>,
          TError,
          Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePublicControllerFindAllTiposVehiculoV1<TData = Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todos los tipos de veh칤culo
 */

export function usePublicControllerFindAllTiposVehiculoV1<TData = Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllTiposVehiculoV1>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPublicControllerFindAllTiposVehiculoV1QueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener todos los veh칤culos
 */
export const publicControllerFindAllVehiculosV1 = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<VehiculoDto[]>> => {
    
    
    return axios.get(
      `/public/vehiculos/v1`,options
    );
  }


export const getPublicControllerFindAllVehiculosV1QueryKey = () => {
    return [`/public/vehiculos/v1`] as const;
    }

    
export const getPublicControllerFindAllVehiculosV1QueryOptions = <TData = Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPublicControllerFindAllVehiculosV1QueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>> = ({ signal }) => publicControllerFindAllVehiculosV1({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PublicControllerFindAllVehiculosV1QueryResult = NonNullable<Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>>
export type PublicControllerFindAllVehiculosV1QueryError = AxiosError<void>


export function usePublicControllerFindAllVehiculosV1<TData = Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>,
          TError,
          Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePublicControllerFindAllVehiculosV1<TData = Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>,
          TError,
          Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePublicControllerFindAllVehiculosV1<TData = Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener todos los veh칤culos
 */

export function usePublicControllerFindAllVehiculosV1<TData = Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicControllerFindAllVehiculosV1>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPublicControllerFindAllVehiculosV1QueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Listar todas las zonas
 */
export const tarifasControllerListarZonas = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ZonaDto[]>> => {
    
    
    return axios.get(
      `/tarifas/zonas`,options
    );
  }


export const getTarifasControllerListarZonasQueryKey = () => {
    return [`/tarifas/zonas`] as const;
    }

    
export const getTarifasControllerListarZonasQueryOptions = <TData = Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTarifasControllerListarZonasQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tarifasControllerListarZonas>>> = ({ signal }) => tarifasControllerListarZonas({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TarifasControllerListarZonasQueryResult = NonNullable<Awaited<ReturnType<typeof tarifasControllerListarZonas>>>
export type TarifasControllerListarZonasQueryError = AxiosError<void>


export function useTarifasControllerListarZonas<TData = Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tarifasControllerListarZonas>>,
          TError,
          Awaited<ReturnType<typeof tarifasControllerListarZonas>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTarifasControllerListarZonas<TData = Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tarifasControllerListarZonas>>,
          TError,
          Awaited<ReturnType<typeof tarifasControllerListarZonas>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTarifasControllerListarZonas<TData = Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Listar todas las zonas
 */

export function useTarifasControllerListarZonas<TData = Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerListarZonas>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTarifasControllerListarZonasQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Obtener tarifas filtradas por tipo de veh칤culo, zona y transportista
 */
export const tarifasControllerTarifasFiltradas = (
    params: TarifasControllerTarifasFiltradasParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TarifaDto[]>> => {
    
    
    return axios.get(
      `/tarifas/filtradas`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getTarifasControllerTarifasFiltradasQueryKey = (params: TarifasControllerTarifasFiltradasParams,) => {
    return [`/tarifas/filtradas`, ...(params ? [params]: [])] as const;
    }

    
export const getTarifasControllerTarifasFiltradasQueryOptions = <TData = Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError = AxiosError<void>>(params: TarifasControllerTarifasFiltradasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTarifasControllerTarifasFiltradasQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>> = ({ signal }) => tarifasControllerTarifasFiltradas(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TarifasControllerTarifasFiltradasQueryResult = NonNullable<Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>>
export type TarifasControllerTarifasFiltradasQueryError = AxiosError<void>


export function useTarifasControllerTarifasFiltradas<TData = Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError = AxiosError<void>>(
 params: TarifasControllerTarifasFiltradasParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>,
          TError,
          Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTarifasControllerTarifasFiltradas<TData = Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError = AxiosError<void>>(
 params: TarifasControllerTarifasFiltradasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>,
          TError,
          Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>
        > , 'initialData'
      >, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTarifasControllerTarifasFiltradas<TData = Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError = AxiosError<void>>(
 params: TarifasControllerTarifasFiltradasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Obtener tarifas filtradas por tipo de veh칤culo, zona y transportista
 */

export function useTarifasControllerTarifasFiltradas<TData = Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError = AxiosError<void>>(
 params: TarifasControllerTarifasFiltradasParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof tarifasControllerTarifasFiltradas>>, TError, TData>>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTarifasControllerTarifasFiltradasQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}
